//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/Settings/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Mobile Actions"",
            ""id"": ""51d9e8bf-e639-4eec-b471-b4c83f64dbb6"",
            ""actions"": [
                {
                    ""name"": ""Swipe"",
                    ""type"": ""Value"",
                    ""id"": ""cfc50cc0-b082-4653-81cf-7940f7f81e28"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7efe178e-a6fc-4d9e-a4b2-5217ade894a7"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mobile Actions
        m_MobileActions = asset.FindActionMap("Mobile Actions", throwIfNotFound: true);
        m_MobileActions_Swipe = m_MobileActions.FindAction("Swipe", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mobile Actions
    private readonly InputActionMap m_MobileActions;
    private List<IMobileActionsActions> m_MobileActionsActionsCallbackInterfaces = new List<IMobileActionsActions>();
    private readonly InputAction m_MobileActions_Swipe;
    public struct MobileActionsActions
    {
        private @InputActions m_Wrapper;
        public MobileActionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swipe => m_Wrapper.m_MobileActions_Swipe;
        public InputActionMap Get() { return m_Wrapper.m_MobileActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MobileActionsActions set) { return set.Get(); }
        public void AddCallbacks(IMobileActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_MobileActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MobileActionsActionsCallbackInterfaces.Add(instance);
            @Swipe.started += instance.OnSwipe;
            @Swipe.performed += instance.OnSwipe;
            @Swipe.canceled += instance.OnSwipe;
        }

        private void UnregisterCallbacks(IMobileActionsActions instance)
        {
            @Swipe.started -= instance.OnSwipe;
            @Swipe.performed -= instance.OnSwipe;
            @Swipe.canceled -= instance.OnSwipe;
        }

        public void RemoveCallbacks(IMobileActionsActions instance)
        {
            if (m_Wrapper.m_MobileActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMobileActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_MobileActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MobileActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MobileActionsActions @MobileActions => new MobileActionsActions(this);
    public interface IMobileActionsActions
    {
        void OnSwipe(InputAction.CallbackContext context);
    }
}
